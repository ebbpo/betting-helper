/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.betting.gui.graph;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.util.Collections;
import java.util.List;
import org.apache.log4j.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.kroky.betting.common.enums.BetStatus;
import org.kroky.betting.common.util.Utils;
import org.kroky.betting.db.objects.Bet;
import org.kroky.betting.gui.custom.EscapableDialog;

/**
 *
 * @author Kroky
 */
public class GraphDialog extends EscapableDialog {
    private static final Logger LOG = Logger.getLogger(GraphDialog.class);
    /**
     * Creates new form GraphDialog
     */
    public GraphDialog(java.awt.Frame parent, boolean modal, List<Bet> bets) {
        super(parent, modal);
        initComponents();
        additionalInit(bets);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Profit Progress");
        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private void additionalInit(List<Bet> bets) {
        //bets = createBets();
        ChartPanel chartPanel = createChartPanel(bets, false);
        scrollPane.setViewportView(chartPanel);
        pack();
        Utils.centerOnParent(getParent(), this);
    }
    
    private ChartPanel createChartPanel(List<Bet> bets, boolean legend) {
        ChartPanel chartPanel = new ChartPanel(createChart(createDataset(bets, true), legend));
        chartPanel.setMouseWheelEnabled(true);
        //we'll use the mainframe size instead
        //set the preferred size as 60% of the screen resolution
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //int width = (int) (screenSize.getWidth() * 0.6);
        //int height = (int) (screenSize.getHeight() * 0.6);
        int width = (int) ((double)getParent().getWidth() * 0.7);
        int height = (int) ((double)getParent().getHeight() * 0.7);
        chartPanel.setPreferredSize(new Dimension(width, height));
        chartPanel.setInitialDelay(0);
        chartPanel.setDismissDelay(20000);
        chartPanel.setReshowDelay(0);
        return chartPanel;
    }

    private JFreeChart createChart(XYDataset xyDataSet, boolean legend) {
        JFreeChart jfreechart = ChartFactory.createXYLineChart("Profit Progress", "Bets", "Profit", xyDataSet, PlotOrientation.VERTICAL, legend, true, false);
        XYPlot xyplot = (XYPlot)jfreechart.getPlot();
        xyplot.setDomainPannable(true);
        xyplot.setRangePannable(true);
        xyplot.setDomainZeroBaselineVisible(true);
        xyplot.setRangeZeroBaselineVisible(true);
        NumberAxis betAxis = (NumberAxis) xyplot.getDomainAxis();
        betAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        betAxis.setMinorTickCount(0);
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
        renderer.setDrawOutlines(true);
        renderer.setUseFillPaint(true);
        renderer.setBaseFillPaint(Color.white);
        renderer.setToolTipGenerator(new BetTooltipGenerator());
        final int seriesCount = ((XYSeriesCollection)xyDataSet).getSeriesCount();
        for(int i = 0; i < seriesCount; i++) {
            renderer.setSeriesShapesVisible(i, true);
            renderer.setSeriesStroke(i, new BasicStroke(1F));
            renderer.setSeriesOutlineStroke(i, new BasicStroke(1F));
            renderer.setSeriesShape(i, new java.awt.geom.Ellipse2D.Double(-3D, -3D, 6D, 6D));
        }
        return jfreechart;
    }

    private XYDataset createDataset(List<Bet> bets) {
        return createDataset(bets, false);
    }
    
    private XYDataset createDataset(List<Bet> bets, boolean sort) {
        XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
        XYSeries xySeries = new XYSeries("S");
        if(sort) {
            Collections.sort(bets);
        }
        double profit = 0;
        int i = 1;
        xySeries.add(BetDataItem.EMPTY);
        for (Bet bet : bets) {
            if(bet.getStatus().equals(BetStatus.ACTIVE)) {
                continue;
            }
            profit += bet.getProfit();
            BetDataItem item = new BetDataItem(i++, profit, bet);
            xySeries.add(item);
            
        }
        xySeriesCollection.addSeries(xySeries);
        return xySeriesCollection;
    }

    /**
     * FOR DEBUG PURPOSES AND PLOTTING GRAPH FROM URLS
     * @param parent
     * @param modal
     * @param series 
     */
    private GraphDialog(java.awt.Frame parent, boolean modal, XYDataset series) {
        super(parent, modal);
        initComponents();
        additionalInit(series);
    }
    
    private void additionalInit(XYDataset xyDataSet) {
        //bets = createBets();
        ChartPanel chartPanel = new ChartPanel(createChart(xyDataSet, true));
        scrollPane.setViewportView(chartPanel);
        pack();
        Utils.centerOnParent(getParent(), this);
    }
}
