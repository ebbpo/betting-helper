/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.betting.gui.forms;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Method;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.log4j.Logger;
import org.kroky.betting.common.enums.MessageType;
import org.kroky.betting.common.enums.TeamStatus;
import org.kroky.betting.common.util.Resources;
import org.kroky.betting.common.util.TeamNameMapper;
import org.kroky.betting.common.util.Utils;
import org.kroky.betting.db.DAO;
import org.kroky.betting.db.objects.Bet;
import org.kroky.betting.db.objects.Provider;
import org.kroky.betting.db.objects.Team;
import org.kroky.betting.gui.custom.AutoCompletePopup;
import org.kroky.betting.gui.custom.Colors;
import org.kroky.betting.gui.custom.DateTimePicker;
import org.kroky.betting.gui.custom.EscapableDialog;
import org.kroky.betting.parsers.ParseResult;
import org.kroky.betting.parsers.Parser;
import org.kroky.betting.parsers.ParserManager;

/**
 *
 * @author pk2
 */
public class NewBetDialog extends EscapableDialog {

    private static final Logger LOG = Logger.getLogger(NewBetDialog.class);

    /**
     * Creates new form NewBetDialog
     */
    public NewBetDialog(MainFrame parent, boolean modal, Team selectedTeam) {
        super(parent, modal);
        this.team = selectedTeam;
        this.parent = parent;
        initComponents();
        additionalInit();
    }

    private void focusGained(FocusEvent evt) {
        JTextField source = (JTextField) evt.getComponent();
        source.selectAll();
        changeListener.setSource(source);
        source.getDocument().addDocumentListener(changeListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        labelActiveTeam = new javax.swing.JLabel();
        buttonGetNextMatch = new javax.swing.JButton();
        btnSetFixturesProvider = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        labelTotalSumInvested = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        panelDatePicker = new javax.swing.JPanel();
        textFieldHomeTeam = new javax.swing.JTextField();
        buttonHomeTeamLookup = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        textFieldAwayTeam = new javax.swing.JTextField();
        buttonAwayTeamLookup = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        textFieldOdds = new javax.swing.JTextField();
        textFieldProfit = new javax.swing.JTextField();
        textFieldRatio = new javax.swing.JTextField();
        textFieldBet = new javax.swing.JTextField();
        textFieldHomeGoals = new javax.swing.JTextField();
        textFieldAwayGoals = new javax.swing.JTextField();
        labelMaxRatio = new javax.swing.JLabel();
        labelMessage = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelNoOfBets = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Bet");

        jLabel9.setText("Team:");

        labelActiveTeam.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelActiveTeam.setText("<team_name>");

        buttonGetNextMatch.setText("Get next match");
        buttonGetNextMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGetNextMatchActionPerformed(evt);
            }
        });

        btnSetFixturesProvider.setText("Set fixtures provider...");
        btnSetFixturesProvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFixturesProviderActionPerformed(evt);
            }
        });

        jLabel4.setText("Total sum invested in current bet chain:");

        labelTotalSumInvested.setText("0.00");

        jLabel1.setText("Match date:");

        panelDatePicker.setLayout(new java.awt.BorderLayout());

        textFieldHomeTeam.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textFieldHomeTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldHomeTeamFocusLost(evt);
            }
        });

        buttonHomeTeamLookup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/magnifier16x16.png"))); // NOI18N
        buttonHomeTeamLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHomeTeamLookupActionPerformed(evt);
            }
        });

        jLabel2.setText("vs.");

        textFieldAwayTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldAwayTeamFocusLost(evt);
            }
        });

        buttonAwayTeamLookup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/magnifier16x16.png"))); // NOI18N
        buttonAwayTeamLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAwayTeamLookupActionPerformed(evt);
            }
        });

        jLabel5.setText("Score:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(":");

        jLabel11.setText("Odds:");

        jLabel12.setText("Netto profit in chain:");

        jLabel14.setText("Return ratio:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Current bet:");

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        textFieldOdds.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textFieldOdds.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldOddsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldOddsFocusLost(evt);
            }
        });

        textFieldProfit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textFieldProfit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldProfitFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldProfitFocusLost(evt);
            }
        });

        textFieldRatio.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textFieldRatio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldRatioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldRatioFocusLost(evt);
            }
        });

        textFieldBet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textFieldBet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldBetFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldBetFocusLost(evt);
            }
        });

        textFieldHomeGoals.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldHomeGoals.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldHomeGoalsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldHomeGoalsFocusLost(evt);
            }
        });

        textFieldAwayGoals.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldAwayGoals.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldAwayGoalsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldAwayGoalsFocusLost(evt);
            }
        });

        labelMaxRatio.setText(" ");

        labelMessage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMessage.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldOdds, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMaxRatio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldBet, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldHomeGoals, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textFieldHomeTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonHomeTeamLookup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textFieldAwayTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAwayTeamLookup))
                    .addComponent(textFieldAwayGoals, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(labelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancel))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCancel, buttonSave});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFieldBet, textFieldProfit});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFieldAwayGoals, textFieldHomeGoals});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFieldOdds, textFieldRatio});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(panelDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(textFieldHomeTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonHomeTeamLookup)
                    .addComponent(jLabel2)
                    .addComponent(textFieldAwayTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAwayTeamLookup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(textFieldHomeGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldAwayGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14)
                    .addComponent(textFieldProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldOdds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMaxRatio))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textFieldBet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonSave)
                    .addComponent(labelMessage)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonSave, labelMessage});

        jLabel6.setText("No. of bets:");

        labelNoOfBets.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelActiveTeam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonGetNextMatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSetFixturesProvider)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalSumInvested)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelNoOfBets)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(labelActiveTeam)
                    .addComponent(buttonGetNextMatch)
                    .addComponent(btnSetFixturesProvider))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labelTotalSumInvested)
                    .addComponent(jLabel6)
                    .addComponent(labelNoOfBets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldHomeGoalsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldHomeGoalsFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldHomeGoalsFocusGained

    private void textFieldHomeGoalsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldHomeGoalsFocusLost
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
    }//GEN-LAST:event_textFieldHomeGoalsFocusLost

    private void textFieldAwayGoalsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldAwayGoalsFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldAwayGoalsFocusGained

    private void textFieldAwayGoalsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldAwayGoalsFocusLost
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
    }//GEN-LAST:event_textFieldAwayGoalsFocusLost

    private void textFieldOddsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldOddsFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldOddsFocusGained

    private void textFieldOddsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldOddsFocusLost
        //<editor-fold defaultstate="collapsed" desc="...">
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
        if (Utils.isEmpty(source.getText()) || odds == 0.0) {
            resetToDefaults();
        } else {
            labelMaxRatio.setText("(< " + Utils.formatTwoDecimal((odds - 1)) + ")");
        }
        source.setText(Utils.formatTwoDecimal(odds));
        //</editor-fold>
    }//GEN-LAST:event_textFieldOddsFocusLost

    private void textFieldProfitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldProfitFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldProfitFocusGained

    private void textFieldProfitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldProfitFocusLost
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
        source.setText(Utils.formatTwoDecimal(profit));
    }//GEN-LAST:event_textFieldProfitFocusLost

    private void textFieldRatioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldRatioFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldRatioFocusGained

    private void textFieldRatioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldRatioFocusLost
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
        source.setText(Utils.formatTwoDecimal(ratio));
    }//GEN-LAST:event_textFieldRatioFocusLost

    private void textFieldBetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldBetFocusGained
        focusGained(evt);
    }//GEN-LAST:event_textFieldBetFocusGained

    private void textFieldBetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldBetFocusLost
        JTextField source = (JTextField) evt.getComponent();
        removeChangeListener(source);
        source.setText(Utils.formatTwoDecimal(betValue));
    }//GEN-LAST:event_textFieldBetFocusLost

    private void buttonHomeTeamLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHomeTeamLookupActionPerformed
        showLookupDialog(textFieldHomeTeam);
    }//GEN-LAST:event_buttonHomeTeamLookupActionPerformed

    private void buttonAwayTeamLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAwayTeamLookupActionPerformed
        showLookupDialog(textFieldAwayTeam);
    }//GEN-LAST:event_buttonAwayTeamLookupActionPerformed

    private void textFieldAwayTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldAwayTeamFocusLost
        //<editor-fold defaultstate="collapsed" desc="...">
        if (!Utils.isEmpty(textFieldAwayTeam.getText()) && !team.getName().equals(textFieldAwayTeam.getText())) {
            AutoCompletePopup.undecorate(textFieldHomeTeam);
            textFieldHomeTeam.setText(team.toString());
            AutoCompletePopup.decorate(teams, textFieldHomeTeam);
            checkTeam();
        }
        //</editor-fold>
    }//GEN-LAST:event_textFieldAwayTeamFocusLost

    private void textFieldHomeTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldHomeTeamFocusLost
        //<editor-fold defaultstate="collapsed" desc="...">
        if (!Utils.isEmpty(textFieldHomeTeam.getText()) && !team.getName().equals(textFieldHomeTeam.getText())) {
            AutoCompletePopup.undecorate(textFieldAwayTeam);
            textFieldAwayTeam.setText(team.toString());
            AutoCompletePopup.decorate(teams, textFieldAwayTeam);
            checkTeam();
        }
        //</editor-fold>
    }//GEN-LAST:event_textFieldHomeTeamFocusLost

    private void btnSetFixturesProviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFixturesProviderActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        FixturesProviderSelectionDialog d = new FixturesProviderSelectionDialog(this, team);
        d.setVisible(true);
        Provider provider = d.getProvider();
        if (provider != null) {
            team.setFixturesProvider(provider);
            DAO.saveOrUpdateTeam(team);
        }
        //</editor-fold>
    }//GEN-LAST:event_btnSetFixturesProviderActionPerformed

    private void buttonGetNextMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGetNextMatchActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        if (team.getFixturesProvider() == null) {
            btnSetFixturesProviderActionPerformed(null);
            if (team.getFixturesProvider() == null) {
                return;
            }
        }
        String text;
        try {
            text = Utils.getHtmlFromUrl(team.getFixturesProvider().getUrl(), true);
        } catch (Exception ex) {
            LOG.error("Unable to retrieve data from URL: " + team.getFixturesProvider().getUrl());
            Utils.showError(this, ex);
            return;
        }
        Parser p = ParserManager.detectSuitableParser(text);
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Unable to detect suitable parser for the given text", "Unable to detect parser", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //sorted by date, ascending
        Set<ParseResult> parseResults = p.parse(text);
        TeamNameMapper mapper = TeamNameMapper.getInstance();
        for (ParseResult r : parseResults) {
            Team homeTeam = mapper.getTeam(r.getHomeTeamName(), team.getSport(), team.getCountry());
            Team awayTeam = mapper.getTeam(r.getAwayTeamName(), team.getSport(), team.getCountry());
            if (team.equals(homeTeam) || team.equals(awayTeam)) {
                AutoCompletePopup.undecorate(textFieldAwayTeam);
                AutoCompletePopup.undecorate(textFieldHomeTeam);
                datePicker.setDate(r.getDate());
                textFieldHomeTeam.setText(homeTeam.getName());
                textFieldAwayTeam.setText(awayTeam.getName());
                AutoCompletePopup.decorate(teams, textFieldAwayTeam);
                AutoCompletePopup.decorate(teams, textFieldHomeTeam);
                textFieldOdds.requestFocusInWindow();
                break;
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_buttonGetNextMatchActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        closeWindow();
    }//GEN-LAST:event_buttonCancelActionPerformed

    @Override
    protected void closeWindow() {
        //<editor-fold defaultstate="collapsed" desc="...">
        if (totalBet != 0.0 && firstUse) {
            totalBet = 0.0;
        }
        dispose();
        //</editor-fold>
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        if (!validateData()) {
            JOptionPane.showMessageDialog(this, "Odds and bet must have value greater than zero\n"
                    + "Current odds: " + Utils.formatTwoDecimal(odds) + "\n"
                    + "Current bet: " + Utils.formatTwoDecimal(betValue) + "\n", "Invalid data", JOptionPane.WARNING_MESSAGE);
            if (odds == 0.0) {
                textFieldOdds.requestFocusInWindow();
            } else {
                textFieldBet.requestFocusInWindow();
            }
            return;
        }
        Timestamp now = Utils.now();
        Bet newBet = new Bet();
        Team homeTeam = DAO.getTeam(textFieldHomeTeam.getText(), team.getSport(), team.getCountry());
        Team awayTeam = DAO.getTeam(textFieldAwayTeam.getText(), team.getSport(), team.getCountry());
        final Timestamp matchDate = new Timestamp(datePicker.getDate().getTime());
        newBet.setCreated(now);
        newBet.setUpdated(now);
        newBet.setActiveTeam(team);
        newBet.setHomeTeam(homeTeam);
        newBet.setAwayTeam(awayTeam);
        newBet.setMatchDate(matchDate);
        newBet.setOdds(odds);

        if (!Utils.isEmpty(textFieldAwayGoals.getText())) {
            newBet.setAwayTeamGoals(awayGoals);
        }
        if (!Utils.isEmpty(textFieldHomeGoals.getText())) {
            newBet.setHomeTeamGoals(homeGoals);
        }
        if (!Utils.isEmpty(textFieldBet.getText())) {
            newBet.setBetValue(betValue);
        }

        team.addBet(newBet);
        DAO.saveOrUpdateTeam(team);
        DAO.refresh(team);
        if (firstUse) {
            firstUse = false;
            //check if the other team is active - if so, offer a bet for it as well
            Team theOtherTeam = team.equals(homeTeam) ? awayTeam : homeTeam;
            //set next match date for both
            team.setNextMatchDate(matchDate);
            theOtherTeam.setNextMatchDate(matchDate);
            //copy the URL for this team
            if (theOtherTeam.getFixturesProvider() == null) {
                Provider provider = team.getFixturesProvider();
                theOtherTeam.setFixturesProvider(provider);
            }
            DAO.saveOrUpdateTeam(theOtherTeam);
            totalBet += betValue;
            if (theOtherTeam.isActive()) {
                this.team = theOtherTeam;
                additionalInit();
            } else {
                dispose();
            }
        } else {
            totalBet += betValue;
            dispose();
        }
        //</editor-fold>
    }//GEN-LAST:event_buttonSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSetFixturesProvider;
    private javax.swing.JButton buttonAwayTeamLookup;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonGetNextMatch;
    private javax.swing.JButton buttonHomeTeamLookup;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelActiveTeam;
    private javax.swing.JLabel labelMaxRatio;
    private javax.swing.JLabel labelMessage;
    private javax.swing.JLabel labelNoOfBets;
    private javax.swing.JLabel labelTotalSumInvested;
    private javax.swing.JPanel panelDatePicker;
    private javax.swing.JTextField textFieldAwayGoals;
    private javax.swing.JTextField textFieldAwayTeam;
    private javax.swing.JTextField textFieldBet;
    private javax.swing.JTextField textFieldHomeGoals;
    private javax.swing.JTextField textFieldHomeTeam;
    private javax.swing.JTextField textFieldOdds;
    private javax.swing.JTextField textFieldProfit;
    private javax.swing.JTextField textFieldRatio;
    // End of variables declaration//GEN-END:variables

    private boolean firstUse = true;
    private DateTimePicker datePicker = new DateTimePicker();
    private final MainFrame parent;
    private Team team;
    private final ChangeListener changeListener = new ChangeListener();
    private DocumentListener docListener = new DocumentListener() {

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkTeam();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkTeam();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkTeam();
        }
    };

    private List<Team> teams;

    private double odds, profit, ratio, betValue, totalSumInvested;
    private int homeGoals, awayGoals;
    private double totalBet;
    private int betCount;

    /**
     * firstUse means that the dialog should be updated with the second team data (happens if both teams are active and we want to set the bet for both)
     */
    private void additionalInit() {
        //<editor-fold defaultstate="collapsed" desc="...">
        if (firstUse) {
            teams = DAO.getAllTeams(team.getSport(), team.getCountry(), team.getLeague());
            Utils.centerOnParent(parent, this);
            //setup datepicker
            datePicker.setFormats("yyyy-MM-dd HH:mm");
            panelDatePicker.add(datePicker, BorderLayout.CENTER);
            buttonGetNextMatch.requestFocusInWindow();
        }

        //add ENTER action on textfields
        textFieldBet.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        textFieldBet.getActionMap().put("submit", new TextFieldEnterAction(textFieldBet));
        textFieldOdds.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        textFieldOdds.getActionMap().put("submit", new TextFieldEnterAction(textFieldOdds));
        textFieldProfit.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        textFieldProfit.getActionMap().put("submit", new TextFieldEnterAction(textFieldProfit));
        textFieldRatio.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        textFieldRatio.getActionMap().put("submit", new TextFieldEnterAction(textFieldRatio));

        buttonGetNextMatch.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        buttonGetNextMatch.getActionMap().put("submit", new ButtonEnterAction("buttonGetNextMatchActionPerformed"));
        btnSetFixturesProvider.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        btnSetFixturesProvider.getActionMap().put("submit", new ButtonEnterAction("buttonSetNewUrlActionPerformed"));
        buttonSave.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        buttonSave.getActionMap().put("submit", new ButtonEnterAction("buttonSaveActionPerformed"));
        buttonCancel.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "submit");
        buttonCancel.getActionMap().put("submit", new ButtonEnterAction("buttonCancelActionPerformed"));

        labelActiveTeam.setText(team.getName());

        //count total investments in the current bet chain
        totalSumInvested = 0.0;
        final Set<Bet> currentBetChain = team.getCurrentBetChain();
        betCount = currentBetChain.size();
        labelNoOfBets.setText("" + betCount);
        for (Bet bet : currentBetChain) {
            totalSumInvested += bet.getBetValue();
        }
        labelTotalSumInvested.setText(Utils.formatTwoDecimal(totalSumInvested));
        if (firstUse) {
            //reset fields to empty and disabled
            resetToDefaults();
            //set team name for both fields
            AutoCompletePopup.decorate(teams, textFieldHomeTeam);
            AutoCompletePopup.decorate(teams, textFieldAwayTeam);

            //display if such bet already exists when both teams and date is filled in
            datePicker.addPropertyChangeListener("date", new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if ("date".equals(evt.getPropertyName())) {
                        checkTeam();
                    }
                }
            });
            textFieldHomeTeam.getDocument().addDocumentListener(docListener);
            textFieldAwayTeam.getDocument().addDocumentListener(docListener);

            pack();
        } else {
            textFieldOdds.setEnabled(false);
            buttonGetNextMatch.setEnabled(false);
            datePicker.setEnabled(false);
            textFieldHomeTeam.setEnabled(false);
            textFieldAwayTeam.setEnabled(false);
            textFieldHomeGoals.setEnabled(false);
            textFieldAwayGoals.setEnabled(false);
            buttonHomeTeamLookup.setEnabled(false);
            buttonAwayTeamLookup.setEnabled(false);
            //call the handleChange method to adjust the values based on the entered odds
            changeListener.setSource(textFieldOdds);
            changeListener.handleChange(null);
            changeListener.setSource(null);
            textFieldBet.requestFocusInWindow();
        }
        checkTeam();
        //</editor-fold>
    }

    private boolean messageShowing() {
        return labelMessage.getIcon() != null || !labelMessage.getText().equals(" ");
    }

    Stack<Object[]> messageStack = new Stack<Object[]>();

    private void showWarning(String text) {
        showMessage(MessageType.WARNING, text);
    }

    private void showError(String text) {
        showMessage(MessageType.ERROR, text);
    }

    private void showMessage(MessageType type, String text) {
//        Object[] objects = new Object[2];
//        objects[0] = type;
//        objects[1] = text;
//        messageStack.push(objects);
        switch (type) {
            case WARNING:
                labelMessage.setForeground(Colors.WARNING);
                labelMessage.setIcon(Resources.getWarningIcon(24, 24));
                break;
            default:
                labelMessage.setForeground(Colors.ERROR);
                labelMessage.setIcon(Resources.getErrorIcon(24, 24));
                break;
        }
        labelMessage.setText(text);
    }

    private void hideMessage() {
//        if(messageStack.empty()) {
//            return;
//        }
//        messageStack.pop();
//        if(messageStack.empty()) {
        labelMessage.setIcon(null);
        labelMessage.setText(" ");
//        } else {
//            Object[] objects = messageStack.pop();
//            showMessage((MessageType) objects[0], (String) objects[1]);
//        }
    }

    private void checkTeam() {
        Date date = datePicker.getDate();
        String homeName = textFieldHomeTeam.getText();
        String awayName = textFieldAwayTeam.getText();

        Team homeTeam = DAO.getTeam(textFieldHomeTeam.getText(), team.getSport(), team.getCountry());
        Team awayTeam = DAO.getTeam(textFieldAwayTeam.getText(), team.getSport(), team.getCountry());

        if (!Utils.isEmpty(homeName) && !Utils.isEmpty(awayName)) {
            if (date != null) {
                for (Bet bet : team.getBets()) {
                    if (bet.getMatchDate().getTime() == date.getTime()
                            && bet.getHomeTeam().getName().equals(homeName)
                            && bet.getAwayTeam().getName().equals(awayName)) {
                        showWarning("Bet for this match already exists");
                        return;
                    }
                }
            }
            if (firstUse) {
                if (!textFieldAwayTeam.isFocusOwner() && !textFieldHomeTeam.isFocusOwner()) {
                    if (awayTeam != null && homeTeam != null) {
                        Team theOtherTeam = team.equals(homeTeam) ? awayTeam : homeTeam;
                        if (theOtherTeam.hasActiveBets()) {
                            showWarning("Opponent has already an active bet");
                            return;
                        }
                    }
                }
            }
            if (homeTeam == null) {
                showError("Home team does not exist!");
                return;
            } else if (homeTeam.getStatus().equals(TeamStatus.DELETED)) {
                showWarning("Home team is deleted");
                return;
            } else {
                hideMessage();
            }
            if (awayTeam == null) {
                showError("Away team does not exist!");
            } else if (awayTeam.getStatus().equals(TeamStatus.DELETED)) {
                showWarning("Away team is deleted");
            } else {
                hideMessage();
            }
        } else if (team.hasActiveBets()) {
            showWarning("This team has already an active bet");
        } else {
            hideMessage();
        }
    }

    private void resetToDefaults() {
        odds = 0.0;
        profit = 0.0;
        ratio = 1.0;
        betValue = 0.0;
        textFieldProfit.setText(Utils.formatTwoDecimal(profit));
        textFieldRatio.setText(Utils.formatTwoDecimal(ratio));
        textFieldBet.setText(Utils.formatTwoDecimal(betValue));
        textFieldProfit.setEnabled(false);
        textFieldRatio.setEnabled(false);
        textFieldBet.setEnabled(false);
        labelMaxRatio.setText(" ");
    }

    private void enableFields() {
        textFieldProfit.setEnabled(true);
        textFieldRatio.setEnabled(true);
        textFieldBet.setEnabled(true);
    }

    private void removeChangeListener(JTextField source) {
        changeListener.setSource(null);
        source.getDocument().removeDocumentListener(changeListener);
    }

    private void showLookupDialog(JTextField source) {
        new TeamLookupDialog(this, true, source, teams).setVisible(true);
    }

    private boolean validateData() {
        return odds > 0.0 && betValue >= 0.0;
    }

    public double getTotalBet() {
        return totalBet;
    }

    private class ChangeListener implements DocumentListener {

        private JTextField source;

        public void setSource(JTextField tf) {
            this.source = tf;
        }

        private ChangeListener() {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            handleChange(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            handleChange(e);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            handleChange(e);
        }

        private void handleChange(DocumentEvent evt) {
            try {
                odds = Double.parseDouble(textFieldOdds.getText());
            } catch (NumberFormatException numberFormatException) {
            }
            try {
                profit = Double.parseDouble(textFieldProfit.getText());
            } catch (NumberFormatException numberFormatException) {
            }
            try {
                ratio = Double.parseDouble(textFieldRatio.getText());
            } catch (NumberFormatException numberFormatException) {
            }
            try {
                betValue = Double.parseDouble(textFieldBet.getText());
            } catch (NumberFormatException numberFormatException) {
            }

            if (source.equals(textFieldHomeGoals)) { // home goals
                textFieldAwayGoals.setText(source.getText());
                try {
                    homeGoals = awayGoals = Short.parseShort(textFieldHomeGoals.getText());
                } catch (NumberFormatException numberFormatException) {
                }
            } else if (source.equals(textFieldAwayGoals)) { // away goals
                textFieldHomeGoals.setText(source.getText());
                try {
                    homeGoals = awayGoals = Short.parseShort(textFieldHomeGoals.getText());
                } catch (NumberFormatException numberFormatException) {
                }
            } else if (source.equals(textFieldOdds)) { // odds
                String str = textFieldOdds.getText();
                try {
                    odds = Double.parseDouble(str);
                } catch (NumberFormatException numberFormatException) {
                    resetToDefaults();
                    return;
                }
                enableFields();
                ratio = 1.0;
                if (ratio >= odds - 1) {
                    return;
                }
                if (betCount < 3) {
                    betValue = team.getFirstBetValueInCurrentChain();
                    for (int i = 0; i < betCount; i++) {
                        betValue += team.getFirstBetValueInCurrentChain();
                    }
                } else {
                    betValue = Utils.roundUp(totalSumInvested / (odds - 1 - ratio));
                }
                profit = betValue * odds - totalSumInvested - betValue;
                textFieldProfit.setText(Utils.formatTwoDecimal(profit));
                textFieldBet.setText(Utils.formatTwoDecimal(betValue));
            } else if (source.equals(textFieldProfit)) { // profit
                String str = textFieldProfit.getText();
                try {
                    profit = Double.parseDouble(Utils.isEmpty(str) ? "0" : str);
                    betValue = (profit + totalSumInvested) / (odds - 1);
                    ratio = betValue != 0.0 ? profit / betValue : 0;

                    textFieldBet.setText(Utils.formatTwoDecimal(betValue));
                    textFieldRatio.setText(Utils.formatTwoDecimal(ratio));
                } catch (NumberFormatException numberFormatException) {

                }
            } else if (source.equals(textFieldRatio)) { // ratio
                String str = textFieldRatio.getText();
                try {
                    ratio = Double.parseDouble(Utils.isEmpty(str) ? "1" : str);
                    if (ratio >= odds - 1) {
                        return;
                    }
                    if (betCount < 3) {
                        betValue = team.getFirstBetValueInCurrentChain();
                        for (int i = 0; i < betCount; i++) {
                            betValue += team.getFirstBetValueInCurrentChain();
                        }
                    } else {
                        betValue = totalSumInvested / (odds - 1 - ratio);
                        //round it up if there is anything else than 0 in the second decimal place
                        betValue = (double) Math.round((betValue + 0.04) * 10) / 10;
                    }
                    profit = betValue * odds - totalSumInvested - betValue;
                    textFieldProfit.setText(Utils.formatTwoDecimal(profit));
                    textFieldBet.setText(Utils.formatTwoDecimal(betValue));
                } catch (NumberFormatException numberFormatException) {

                }
            } else if (source.equals(textFieldBet)) { // bet
                String str = textFieldBet.getText();
                try {
                    betValue = Double.parseDouble(Utils.isEmpty(str) ? "0" : str);
                    profit = betValue * odds - totalSumInvested - betValue;
                    ratio = betValue != 0.0 ? profit / betValue : 0;
                    textFieldProfit.setText(Utils.formatTwoDecimal(profit));
                    textFieldRatio.setText(Utils.formatTwoDecimal(ratio));
                } catch (NumberFormatException numberFormatException) {

                }
            }
        }
    }

    private class TextFieldEnterAction extends AbstractAction {

        private JTextField textField;

        public TextFieldEnterAction(JTextField textField) {
            this.textField = textField;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            textField.transferFocus();
            removeChangeListener(textField);
            buttonSaveActionPerformed(e);
        }
    }

    private class ButtonEnterAction extends AbstractAction {

        private final Logger LOG = Logger.getLogger(NewBetDialog.ButtonEnterAction.class);
        private String fName;

        public ButtonEnterAction(String fName) {
            this.fName = fName;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                final Method methods[] = NewBetDialog.this.getClass().getDeclaredMethods();
                for (int i = 0; i < methods.length; ++i) {
                    if (fName.equals(methods[i].getName())) {
                        methods[i].setAccessible(true);
                        methods[i].invoke(NewBetDialog.this, e);
                        break;
                    }
                }
            } catch (Exception ex) {
                LOG.warn("Failed to execute method " + fName + " using reflection.");
            }
        }
    }
}
