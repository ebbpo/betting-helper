/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.betting.gui.forms;

import java.awt.event.*;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.sort.RowFilters;
import org.jdesktop.swingx.sort.TableSortController;
import org.kroky.betting.common.util.Utils;
import org.kroky.betting.db.objects.Team;
import org.kroky.betting.gui.custom.EscapableDialog;
import org.kroky.betting.gui.custom.tables.ActiveTeamsTableModel;

/**
 *
 * @author Kroky
 */
public class TeamLookupDialog extends EscapableDialog {

    private JTextField textField;
    private JDialog parent;
    
    /**
     * Creates new form TeamLookupDialog
     */
    public TeamLookupDialog(JDialog parent, boolean modal, JTextField textField, List<Team> teams) {
        this(parent, modal, textField, false, teams);
    }
    
    public TeamLookupDialog(JDialog parent, boolean modal, JTextField textField, boolean undecorated, List<Team> teams) {
        super(parent, modal);
        this.textField = textField;
        this.parent = parent;
        table = new JXTable(new ActiveTeamsTableModel(teams));
        setUndecorated(undecorated);
        initComponents();
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldLookup = new javax.swing.JTextField();
        scrollPaneLookup = new javax.swing.JScrollPane();
        buttonCancel = new javax.swing.JButton();
        buttonSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Team Lookup");

        textFieldLookup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldLookupKeyPressed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonSelect.setText("Select");
        buttonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 83, Short.MAX_VALUE)
                        .addComponent(buttonSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addComponent(scrollPaneLookup)
                    .addComponent(textFieldLookup))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCancel, buttonSelect});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textFieldLookup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneLookup, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonSelect))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectActionPerformed
        if(table.getSelectedRows().length == 1) {
            String name = table.getStringAt(table.getSelectedRow(),0);
            textField.setText(name);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a single team in the list to proceed", "Select a team", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonSelectActionPerformed

    private void textFieldLookupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldLookupKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            textFieldLookup.transferFocus();
            if(table.getRowCount() > 0) {
                table.getSelectionModel().setSelectionInterval(0, 0);
            }
        }
    }//GEN-LAST:event_textFieldLookupKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSelect;
    private javax.swing.JScrollPane scrollPaneLookup;
    private javax.swing.JTextField textFieldLookup;
    // End of variables declaration//GEN-END:variables

    private JXTable table;
    
    
    private void additionalInit() {
        Utils.centerOnParent(parent, this);
        textFieldLookup.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                change();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                change();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                change();
            }
        });
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if(e.getClickCount() == 2) {
                    buttonSelectActionPerformed(null);
                }
            }
        });
        
        table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "selectTeam");
        table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "focusForward");
        table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_DOWN_MASK), "focusBackward");
        table.getActionMap().put("selectTeam", new SelectTeamAction());
        table.getActionMap().put("focusForward", new FocusForwardAction());
        table.getActionMap().put("focusBackward", new FocusBackwardAction());
        
        table.addFocusListener(new FocusAdapter() {

            @Override
            public void focusGained(FocusEvent e) {
                if(table.getRowCount() > 0 && table.getSelectedRowCount() == 0) {
                    table.getSelectionModel().setSelectionInterval(0, 0);
                }
            }
            
        });
        scrollPaneLookup.setViewportView(table);
    }

    private void change() {
        String regex = ".*" + textFieldLookup.getText() + ".*";
        RowFilter<Object, Object> filter = RowFilters.regexFilter(Pattern.CASE_INSENSITIVE, regex);
        TableSortController rowSorter = (TableSortController) table.getRowSorter();
        rowSorter.setRowFilter(filter);
    }
    
    private class SelectTeamAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            buttonSelectActionPerformed(null);
        }

    }
    
    private class FocusForwardAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            table.transferFocus();
        }

    }
    
    private class FocusBackwardAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            table.transferFocusBackward();
        }

    }
}
