/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.betting.gui.forms;

import foxtrot.AsyncTask;
import foxtrot.AsyncWorker;
import foxtrot.Job;
import foxtrot.Worker;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.RowFilter.Entry;
import javax.swing.RowSorter;
import javax.swing.ScrollPaneConstants;
import javax.swing.SortOrder;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.sort.RowFilters;
import org.jdesktop.swingx.sort.TableSortController;
import static org.kroky.betting.common.enums.BetStatus.ACTIVE;
import static org.kroky.betting.common.enums.BetStatus.CANCELED;
import org.kroky.betting.common.enums.MatchResult;
import org.kroky.betting.common.enums.ProviderType;
import org.kroky.betting.common.enums.TeamStatus;
import org.kroky.betting.common.exceptions.BettingException;
import org.kroky.betting.common.exceptions.BettingExceptionHandler;
import org.kroky.betting.common.exceptions.BettingRuntimeException;
import org.kroky.betting.common.util.Resources;
import org.kroky.betting.common.util.TeamNameMapper;
import org.kroky.betting.common.util.Utils;
import org.kroky.betting.db.DAO;
import org.kroky.betting.db.DBManager;
import org.kroky.betting.db.DBState;
import static org.kroky.betting.db.DBState.isRemoved;
import static org.kroky.betting.db.DBState.isUpdated;
import static org.kroky.betting.db.DBState.setAdded;
import static org.kroky.betting.db.DBState.setRemoved;
import static org.kroky.betting.db.DBState.setUpdated;
import org.kroky.betting.db.objects.Bet;
import org.kroky.betting.db.objects.Match;
import org.kroky.betting.db.objects.Provider;
import org.kroky.betting.db.objects.Team;
import org.kroky.betting.db.objects.TeamMapping;
import org.kroky.betting.gui.custom.tables.ActiveTeamsTable;
import org.kroky.betting.gui.custom.tables.ActiveTeamsTableModel;
import org.kroky.betting.gui.custom.tables.BetsTable;
import org.kroky.betting.gui.custom.tables.BetsTableModel;
import org.kroky.betting.gui.custom.tables.DeletedTeamsTable;
import org.kroky.betting.gui.custom.tables.DeletedTeamsTableModel;
import org.kroky.betting.gui.custom.tables.ProvidersTable;
import org.kroky.betting.gui.custom.tables.ProvidersTableModel;
import org.kroky.betting.gui.custom.tables.TeamsTable;
import org.kroky.betting.gui.custom.tables.TeamsTableModel;
import org.kroky.betting.gui.graph.GraphDialog;
import org.kroky.betting.parsers.ParseResult;
import org.kroky.betting.parsers.Parser;
import org.kroky.betting.parsers.ParserManager;

/**
 *
 * @author Kroky
 */
public class MainFrame extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(MainFrame.class);

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupTeamsTable = new JPopupMenu();
        miAddToActive = new JMenuItem();
        miSetLeague = new JMenuItem();
        miNewFixturesProvider = new JMenuItem();
        tabMain = new JTabbedPane();
        jPanel4 = new JPanel();
        btnFetchResultsFromWeb = new JButton();
        btnSelectAllProviderSources = new JButton();
        btnRemoveResultProvider = new JButton();
        btnAddResultProvider = new JButton();
        spProvidersTable = new JScrollPane();
        jScrollPane3 = new JScrollPane();
        textArea = new JTextArea();
        jLabel2 = new JLabel();
        cbParsers = new JComboBox();
        btnParse = new JButton();
        jPanel2 = new JPanel();
        spGraph = new JScrollPane();
        panelDetails = new JPanel();
        jPanel1 = new JPanel();
        cbFilterBy = new JComboBox();
        cbComparisonType = new JComboBox();
        tfFilterValue = new JTextField();
        chkBoxTeamFilter = new JCheckBox();
        tabTeams = new JTabbedPane();
        spTeamsTable = new JScrollPane();
        spDeletedTeamsTable = new JScrollPane();
        btnAddTeams = new JButton();
        btnDeleteRestoreTeams = new JButton();
        jPanel5 = new JPanel();
        jPanel3 = new JPanel();
        btnNewBet = new JButton();
        btnSelectAllActiveTeams = new JButton();
        spActiveTeamsTable = new JScrollPane();
        btnRemoveActiveTeam = new JButton();
        cbActiveTeamsFilter = new JComboBox();
        lblLastBetInfo = new JLabel();
        btnRefreshDates = new JButton();
        jPanel6 = new JPanel();
        btnDeleteBets = new JButton();
        cbBetsFilter = new JComboBox();
        spBets = new JScrollPane();
        btnShowGraph = new JButton();
        lblHomeTeam = new JLabel();
        lblHomeGoals = new JLabel();
        lblGoalsSeparator = new JLabel();
        lblAwayGoals = new JLabel();
        lblAwayTeam = new JLabel();
        panelStatusBar = new JPanel();
        lblStatusBar = new JLabel();
        pbStatusBar = new JProgressBar();

        miAddToActive.setText("Add selected teams to active list");
        miAddToActive.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miAddToActiveActionPerformed(evt);
            }
        });
        popupTeamsTable.add(miAddToActive);

        miSetLeague.setText("Set league for selected teams...");
        miSetLeague.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miSetLeagueActionPerformed(evt);
            }
        });
        popupTeamsTable.add(miSetLeague);

        miNewFixturesProvider.setText("Set fixtures provider for selected teams...");
        miNewFixturesProvider.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                miNewFixturesProviderActionPerformed(evt);
            }
        });
        popupTeamsTable.add(miNewFixturesProvider);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Betting Helper");
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabMain.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                tabMainStateChanged(evt);
            }
        });

        btnFetchResultsFromWeb.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        btnFetchResultsFromWeb.setText("FETCH");
        btnFetchResultsFromWeb.setEnabled(false);
        btnFetchResultsFromWeb.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnFetchResultsFromWebActionPerformed(evt);
            }
        });

        btnSelectAllProviderSources.setText("Select All");
        btnSelectAllProviderSources.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSelectAllProviderSourcesActionPerformed(evt);
            }
        });

        btnRemoveResultProvider.setText("Remove");
        btnRemoveResultProvider.setEnabled(false);
        btnRemoveResultProvider.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRemoveResultProviderActionPerformed(evt);
            }
        });

        btnAddResultProvider.setText("Add...");
        btnAddResultProvider.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddResultProviderActionPerformed(evt);
            }
        });

        spProvidersTable.setBorder(BorderFactory.createTitledBorder("Choose provider"));

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setRows(5);
        jScrollPane3.setViewportView(textArea);

        jLabel2.setText("Choose parser:");

        cbParsers.setModel(new DefaultComboBoxModel(ParserManager.getAllParsers()));

        btnParse.setText("Parse!");
        btnParse.setEnabled(false);
        btnParse.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnParseActionPerformed(evt);
            }
        });

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbParsers, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnParse))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(spProvidersTable)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btnRemoveResultProvider)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddResultProvider)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectAllProviderSources)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                                .addComponent(btnFetchResultsFromWeb)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 541, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {btnAddResultProvider, btnFetchResultsFromWeb, btnRemoveResultProvider, btnSelectAllProviderSources});

        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(spProvidersTable, GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoveResultProvider)
                            .addComponent(btnAddResultProvider)
                            .addComponent(btnSelectAllProviderSources)
                            .addComponent(btnFetchResultsFromWeb)))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnParse)
                    .addComponent(jLabel2)
                    .addComponent(cbParsers, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jPanel4Layout.linkSize(SwingConstants.VERTICAL, new Component[] {btnAddResultProvider, btnFetchResultsFromWeb, btnRemoveResultProvider, btnSelectAllProviderSources});

        tabMain.addTab("Result Providers and HTML Parsing", jPanel4);

        spGraph.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        panelDetails.setBorder(BorderFactory.createTitledBorder(" Details "));

        GroupLayout panelDetailsLayout = new GroupLayout(panelDetails);
        panelDetails.setLayout(panelDetailsLayout);
        panelDetailsLayout.setHorizontalGroup(panelDetailsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );
        panelDetailsLayout.setVerticalGroup(panelDetailsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cbFilterBy.setModel(new DefaultComboBoxModel(new String[] { "Active", "Draws", "Team", "Sport", "Country", "League" }));
        cbFilterBy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbFilterByActionPerformed(evt);
            }
        });

        cbComparisonType.setModel(new DefaultComboBoxModel(new String[] { "No", "Yes" }));
        cbComparisonType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbComparisonTypeActionPerformed(evt);
            }
        });

        tfFilterValue.setEnabled(false);

        chkBoxTeamFilter.setText("Filter:");
        chkBoxTeamFilter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chkBoxTeamFilterActionPerformed(evt);
            }
        });

        tabTeams.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                tabTeamsStateChanged(evt);
            }
        });
        tabTeams.addTab("Regular", spTeamsTable);
        tabTeams.addTab("Deleted", spDeletedTeamsTable);

        btnAddTeams.setIcon(new ImageIcon(getClass().getResource("/resources/add_green-must_have_icons-16x16.png"))); // NOI18N
        btnAddTeams.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddTeamsActionPerformed(evt);
            }
        });

        btnDeleteRestoreTeams.setIcon(new ImageIcon(getClass().getResource("/resources/delete-must_have_icons-16x16.png"))); // NOI18N
        btnDeleteRestoreTeams.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDeleteRestoreTeamsActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chkBoxTeamFilter)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbFilterBy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbComparisonType, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfFilterValue, GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteRestoreTeams)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddTeams))
            .addComponent(tabTeams)
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(btnDeleteRestoreTeams)
                    .addComponent(btnAddTeams)
                    .addComponent(tfFilterValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbComparisonType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbFilterBy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkBoxTeamFilter))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabTeams, GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(panelDetails, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(spGraph))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDetails, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spGraph, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabMain.addTab("Teams", jPanel2);

        btnNewBet.setText("New Bet");
        btnNewBet.setEnabled(false);
        btnNewBet.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnNewBetActionPerformed(evt);
            }
        });

        btnSelectAllActiveTeams.setText("Select all");
        btnSelectAllActiveTeams.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSelectAllActiveTeamsActionPerformed(evt);
            }
        });

        spActiveTeamsTable.setBorder(BorderFactory.createEtchedBorder());

        btnRemoveActiveTeam.setText("Remove");
        btnRemoveActiveTeam.setEnabled(false);
        btnRemoveActiveTeam.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRemoveActiveTeamActionPerformed(evt);
            }
        });

        cbActiveTeamsFilter.setModel(new DefaultComboBoxModel(new String[] { "All", "In progress", "Not in progress", "Chain incomplete", "Chain complete", "Recently updated" }));
        cbActiveTeamsFilter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbActiveTeamsFilterActionPerformed(evt);
            }
        });

        lblLastBetInfo.setHorizontalAlignment(SwingConstants.RIGHT);
        lblLastBetInfo.setText(" ");

        btnRefreshDates.setText("Refresh dates");
        btnRefreshDates.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRefreshDatesActionPerformed(evt);
            }
        });

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(cbActiveTeamsFilter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectAllActiveTeams)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                .addComponent(btnRefreshDates))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnRemoveActiveTeam)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewBet)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLastBetInfo))
            .addComponent(spActiveTeamsTable)
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cbActiveTeamsFilter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectAllActiveTeams)
                    .addComponent(btnRefreshDates))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spActiveTeamsTable, GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveActiveTeam)
                    .addComponent(btnNewBet)
                    .addComponent(lblLastBetInfo)))
        );

        jPanel3Layout.linkSize(SwingConstants.VERTICAL, new Component[] {btnSelectAllActiveTeams, cbActiveTeamsFilter});

        btnDeleteBets.setText("Delete");
        btnDeleteBets.setEnabled(false);
        btnDeleteBets.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDeleteBetsActionPerformed(evt);
            }
        });

        cbBetsFilter.setModel(new DefaultComboBoxModel(new String[] { "All", "Last bet only", "Active chain", "Last completed chain" }));
        cbBetsFilter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbBetsFilterActionPerformed(evt);
            }
        });

        spBets.setBorder(BorderFactory.createEtchedBorder());

        btnShowGraph.setText("Show graph");
        btnShowGraph.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnShowGraphActionPerformed(evt);
            }
        });

        lblHomeTeam.setText("home");

        lblHomeGoals.setText("2");

        lblGoalsSeparator.setText(":");

        lblAwayGoals.setText("2");

        lblAwayTeam.setText("away");

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(spBets)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(cbBetsFilter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(btnShowGraph))
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHomeTeam)
                .addGap(18, 18, 18)
                .addComponent(lblHomeGoals)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblGoalsSeparator)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAwayGoals)
                .addGap(18, 18, 18)
                .addComponent(lblAwayTeam)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteBets))
        );
        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBetsFilter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowGraph))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spBets)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteBets)
                    .addComponent(lblHomeTeam)
                    .addComponent(lblHomeGoals)
                    .addComponent(lblGoalsSeparator)
                    .addComponent(lblAwayGoals)
                    .addComponent(lblAwayTeam)))
        );

        jPanel6Layout.linkSize(SwingConstants.VERTICAL, new Component[] {btnDeleteBets, cbBetsFilter});

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabMain.addTab("My Bets", jPanel5);

        getContentPane().add(tabMain, BorderLayout.CENTER);

        panelStatusBar.setBorder(BorderFactory.createEtchedBorder());

        lblStatusBar.setText("    ");

        GroupLayout panelStatusBarLayout = new GroupLayout(panelStatusBar);
        panelStatusBar.setLayout(panelStatusBarLayout);
        panelStatusBarLayout.setHorizontalGroup(panelStatusBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelStatusBarLayout.createSequentialGroup()
                .addComponent(lblStatusBar, GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbStatusBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        panelStatusBarLayout.setVerticalGroup(panelStatusBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelStatusBarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelStatusBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatusBar, GroupLayout.Alignment.TRAILING)
                    .addComponent(pbStatusBar, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(panelStatusBar, BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //<editor-fold defaultstate="collapsed" desc="...">
        new ShutdownDBDialog(this, true).setVisible(true);
        //</editor-fold>
    }//GEN-LAST:event_formWindowClosing

    private void tabMainStateChanged(ChangeEvent evt) {//GEN-FIRST:event_tabMainStateChanged
        //<editor-fold defaultstate="collapsed" desc="...">
//        if (getSelectedTitle().equals("Teams")) {
//            //no need to refresh
//            //tasks.refreshTeamsTable(true);
//        } else if (getSelectedTitle().equals("HTML Parse")) {
//            textArea.requestFocusInWindow();
//        }
        //</editor-fold>
    }//GEN-LAST:event_tabMainStateChanged

    private void btnShowGraphActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnShowGraphActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        new GraphDialog(this, true, DAO.getAllBets()).setVisible(true);
        //</editor-fold>
    }//GEN-LAST:event_btnShowGraphActionPerformed

    private void cbBetsFilterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbBetsFilterActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        String cmbValue = (String) cbBetsFilter.getSelectedItem();
        RowFilter<Object, Object> filter;
        TableRowSorter rowSorter = (TableRowSorter) tableBets.getRowSorter();
        //All, Last bet only, Active chain, Last completed chain
        //note the 999 in entry() - this is the bet object hidden in the model
        if ("Last bet only".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Bet bet = (Bet) entry.getValue(999);
                    return bet.equals(bet.getActiveTeam().getLastBet());
                }
            };
        } else if ("Active chain".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Bet bet = (Bet) entry.getValue(999);
                    return bet.getActiveTeam().getCurrentBetChain().contains(bet);
                }
            };
        } else if ("Last completed chain".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Bet bet = (Bet) entry.getValue(999);
                    return bet.getActiveTeam().getLastCompletedBetChain().contains(bet);
                }
            };
        } else {
            filter = null;
        }
        rowSorter.setRowFilter(filter);
        //</editor-fold>
    }//GEN-LAST:event_cbBetsFilterActionPerformed

    private void btnDeleteBetsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteBetsActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        Bet[] selectedBets = tableBets.getSelectedBets();
        int rv = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected bets?", "Delete bets?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (rv == JOptionPane.YES_OPTION) {
            Map<Team, List<Bet>> map = new HashMap<Team, List<Bet>>();
            for (Bet bet : selectedBets) {
                Team team = bet.getActiveTeam();
                if (!map.containsKey(team)) {
                    map.put(team, new ArrayList<Bet>());
                }
                map.get(team).add(bet);
            }
            DAO.begin();
            try {
                for (Team team : map.keySet()) {
                    for (Bet bet : map.get(team)) {
                        team.removeBet(bet);
                        DAO.deleteBet(bet);
                    }
                    DAO.saveOrUpdateTeam(team);
                }
                DAO.commit();
            } catch (Exception e) {
                DAO.rollback();
                for (Team team : map.keySet()) {
                    DAO.refresh(team);
                }
                if (e instanceof BettingRuntimeException) {
                    throw (BettingRuntimeException) e;
                }
                throw new BettingRuntimeException("Unexpected error", "Unexpected error", e);
            }
            cbActiveTeamsFilterActionPerformed(null);
            activeTeamsTableSelection();
        }
        //</editor-fold>
    }//GEN-LAST:event_btnDeleteBetsActionPerformed

    private void btnRefreshDatesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRefreshDatesActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        AsyncWorker.post(new RefreshDatesTask());
        //</editor-fold>
    }//GEN-LAST:event_btnRefreshDatesActionPerformed

    private void cbActiveTeamsFilterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbActiveTeamsFilterActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        String cmbValue = (String) cbActiveTeamsFilter.getSelectedItem();
        RowFilter<Object, Object> filter;
        TableSortController rowSorter = (TableSortController) tableActiveTeams.getRowSorter();
        if ("In progress".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Team team = (Team) entry.getValue(0);
                    return team.hasActiveBets();
                }
            };
        } else if ("Not in progress".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Team team = (Team) entry.getValue(0);
                    return team.hasIncompleteChain() || team.hasCompleteChain();
                }
            };
        } else if ("Chain incomplete".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Team team = (Team) entry.getValue(0);
                    return team.hasIncompleteChain();
                }
            };
        } else if ("Chain complete".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Team team = (Team) entry.getValue(0);
                    return team.hasCompleteChain();
                }
            };
        } else if ("Recently updated".equals(cmbValue)) {
            filter = new RowFilter() {

                @Override
                public boolean include(Entry entry) {
                    Team team = (Team) entry.getValue(0);
                    return team.isUpdatedRecently();
                }
            };
        } else {
            filter = null;
        }
        rowSorter.setRowFilter(filter);
        tableBets.resetSortingToDefault();
        //</editor-fold>
    }//GEN-LAST:event_cbActiveTeamsFilterActionPerformed

    private void btnRemoveActiveTeamActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveActiveTeamActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        int[] selectedRows = tableActiveTeams.getSelectedRows();
        if (selectedRows.length == 0) {
            return;
        }
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, "Are you sure you want to remove the selected team(s)\n"
                + "from the list of active teams?\n\n"
                + "Note: Associated bets will be still\n"
                + "maintained in the database.", "Remove team(s) from list?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
            for (int index : selectedRows) {
                Team team = tableActiveTeams.getTeam(index);
                boolean hasActiveBets = team.hasActiveBets();
                boolean chainInclomplete = team.hasIncompleteChain();

                boolean reallySave = true;
                if (hasActiveBets || chainInclomplete) {
                    StringBuilder message = new StringBuilder("Are you absolutely sure?");
                    if (hasActiveBets) {
                        message.append("\n").append(team.getName()).append(" has an active bet.");
                    }
                    if (chainInclomplete) {
                        message.append("\n").append(team.getName()).append(" has not completed the bet chain.");
                    }
                    if (JOptionPane.YES_OPTION != JOptionPane.showConfirmDialog(this, message.toString(), "Remove team from list?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
                        reallySave = false;
                    }
                }
                if (reallySave) {
                    team.setStatus(TeamStatus.REGULAR);
                    team.setNextMatchDate(null);
                    DAO.saveOrUpdateTeam(team);
                }
            }
            refreshActiveTeamsTable();
        }
        //</editor-fold>
    }//GEN-LAST:event_btnRemoveActiveTeamActionPerformed

    private void btnSelectAllActiveTeamsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActiveTeamsActionPerformed
        tableActiveTeams.selectAll();
    }//GEN-LAST:event_btnSelectAllActiveTeamsActionPerformed

    private void btnNewBetActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnNewBetActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        NewBetDialog dialog = new NewBetDialog(this, true, getSelectedActiveTeam());
        dialog.setVisible(true);
        if (dialog.getTotalBet() > 0.0) {
            activeTeamsTableSelection();
            JOptionPane.showMessageDialog(this, "Total bet: " + Utils.formatTwoDecimal(dialog.getTotalBet()), "Total bet", JOptionPane.INFORMATION_MESSAGE);
            cbActiveTeamsFilterActionPerformed(null);
        }
        //</editor-fold>
    }//GEN-LAST:event_btnNewBetActionPerformed

    private void btnAddTeamsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddTeamsActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        TeamMappingDialog mappingDialog = new TeamMappingDialog(this, true);
        mappingDialog.setVisible(true);
        if (mappingDialog.wasAccepted()) {
            Set<TeamMapping> newMappings = mappingDialog.getNewMappings();
            String message = "Updating mappings and teams...";
            LOG.debug(message);
            for (TeamMapping mapping : newMappings) {
                //first we save team
                Team team = mapping.getTeam();
                team = DAO.insertTeam(team);
                //then mapping
                mapping.setTeam(team);
                DAO.insertTeamMapping(mapping);
                tableTeams.addTeam(team);
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_btnAddTeamsActionPerformed

    private void chkBoxTeamFilterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chkBoxTeamFilterActionPerformed
        applyFilter();
    }//GEN-LAST:event_chkBoxTeamFilterActionPerformed

    private void cbComparisonTypeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbComparisonTypeActionPerformed
        applyFilter();
    }//GEN-LAST:event_cbComparisonTypeActionPerformed

    private void cbFilterByActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbFilterByActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        String filterBy = cbFilterBy.getSelectedItem().toString();
        if (filterBy.equals("Team") || filterBy.equals("Sport") || filterBy.equals("Country") || filterBy.equals("League")) {
            cbComparisonType.setModel(new DefaultComboBoxModel(new String[]{"Like", "="}));
            tfFilterValue.setEnabled(true);
        } else if (filterBy.equals("Draws")) {
            cbComparisonType.setModel(new DefaultComboBoxModel(new String[]{">", "<", "="}));
            tfFilterValue.setEnabled(true);
        } else {
            cbComparisonType.setModel(new DefaultComboBoxModel(new String[]{"No", "Yes"}));
            tfFilterValue.setEnabled(false);
        }
        applyFilter();
        //</editor-fold>
    }//GEN-LAST:event_cbFilterByActionPerformed

    private void btnParseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnParseActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        Set<ParseResult> results = (Set<ParseResult>) Worker.post(new ParseJob());
        if (!results.isEmpty()) {
            new ParseResultsDialog(MainFrame.this, true, results).setVisible(true);
            refreshTeamsTable();
            refreshActiveTeamsTable();
            cbActiveTeamsFilterActionPerformed(null);
            selectTab("My Bets");
        } else {
            String message = "Parsing the text yielded no results";
            JOptionPane.showMessageDialog(MainFrame.this, message, "No results", JOptionPane.INFORMATION_MESSAGE);
        }
        //</editor-fold>
    }//GEN-LAST:event_btnParseActionPerformed

    private void btnAddResultProviderActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddResultProviderActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        new NewProviderDialog(this, true, ProviderType.RESULTS).setVisible(true);
        if (DBState.isAdded(Provider.class)) {
            refreshProvidersTable();
            DBState.setAdded(Provider.class, false);
        }
        //</editor-fold>
    }//GEN-LAST:event_btnAddResultProviderActionPerformed

    private void btnRemoveResultProviderActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveResultProviderActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, "Are you sure you want to remove the selected provider(s)?", "Remove provider(s) from list?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
            Provider[] selectedProviders = tableProviders.getSelectedProviders();
//            DAO.begin();
            try {
                for (Provider resultProvider : selectedProviders) {
                    DAO.deleteProvider(resultProvider);
                }
            } catch (BettingRuntimeException e) {
//                DAO.rollback();
                throw e;
            }
//            DAO.commit();
            if (isRemoved(Provider.class)) {
                refreshProvidersTable();
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_btnRemoveResultProviderActionPerformed

    private void btnSelectAllProviderSourcesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSelectAllProviderSourcesActionPerformed
        tableProviders.selectAll();
    }//GEN-LAST:event_btnSelectAllProviderSourcesActionPerformed

    private void btnFetchResultsFromWebActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnFetchResultsFromWebActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        Worker.post(new FetchJob());
        //</editor-fold>
    }//GEN-LAST:event_btnFetchResultsFromWebActionPerformed

    private void miAddToActiveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miAddToActiveActionPerformed
        addTeamsToActiveTeamsTable();
    }//GEN-LAST:event_miAddToActiveActionPerformed

    private void miSetLeagueActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miSetLeagueActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        String league = JOptionPane.showInputDialog(this, "Enter the name of the league:", "Name of the League", JOptionPane.QUESTION_MESSAGE);
        if (league == null) {
            return;
        }
        final int[] selectedIndices = tableTeams.getSelectedRows();
        int col = tableTeams.getTableModel().findColumn("League");
        for (int i = 0; i < selectedIndices.length; i++) {
            Team team = tableTeams.getTeam(selectedIndices[i]);
            if (!league.equals(team.getLeague())) {
                team.setLeague(league);
                DAO.saveOrUpdateTeam(team);
                tableTeams.getTableModel().fireTableCellUpdated(i, col);
            }
        }
        setUpdated(Team.class, false);
        //</editor-fold>
    }//GEN-LAST:event_miSetLeagueActionPerformed

    private void miNewFixturesProviderActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miNewFixturesProviderActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        final Team[] selectedTeams = tableTeams.getSelectedTeams();
        FixturesProviderSelectionDialog d = new FixturesProviderSelectionDialog(this, selectedTeams[0]);
        d.setVisible(true);
        Provider provider = d.getProvider();
        if (provider != null) {
            for (Team team : selectedTeams) {
                if (!provider.equals(team.getFixturesProvider())) {
                    team.setFixturesProvider(provider);
                    DAO.saveOrUpdateTeam(team);
                }
            }
            setUpdated(Team.class, false);
        }
        //</editor-fold>
    }//GEN-LAST:event_miNewFixturesProviderActionPerformed

    private void tabTeamsStateChanged(ChangeEvent evt) {//GEN-FIRST:event_tabTeamsStateChanged
        //<editor-fold defaultstate="collapsed" desc="...">
        String title = tabTeams.getTitleAt(tabTeams.getSelectedIndex());
        if ("Regular".equals(title)) {
            btnDeleteRestoreTeams.setIcon(Resources.getDeleteIcon(16, 16));
            btnDeleteRestoreTeams.setActionCommand("delete");
        } else {
            btnDeleteRestoreTeams.setIcon(Resources.getRestoreIcon(16, 16));
            btnDeleteRestoreTeams.setActionCommand("restore");
        }
        //</editor-fold>
    }//GEN-LAST:event_tabTeamsStateChanged

    private void btnDeleteRestoreTeamsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteRestoreTeamsActionPerformed
        //<editor-fold defaultstate="collapsed" desc="...">
        String actionCommand = evt.getActionCommand();
        if ("delete".equals(actionCommand)) {
            Team[] teams = tableTeams.getSelectedTeams();
            if (teams.length > 0 && JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, "Are you sure you want to remove selected teams?\n"
                    + "They will not be physically removed, you can still find them\n"
                    + "in the Deleted tab and restore them if you wish so.", "Remove Teams", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
                boolean proceed = false;
                for (Team team : teams) {
                    if (team.hasActiveBets() || team.hasIncompleteChain()) {
                        proceed = JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, "Are you 100% sure?\n"
                                + "At least one of the teams has active or incomplete bet chain.", "Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                    proceed = true;
                }
                if (proceed) {
                    for (Team team : teams) {
                        DAO.deleteTeam(team);
                    }
                    if (isUpdated(Team.class)) {
                        refreshTeamsTable();
                        tabTeams.setSelectedIndex(1);
                        refreshDeletedTeamsTable();
                        refreshActiveTeamsTable();
                    }
                }
            }
        } else {
            Team[] teams = tableDeletedTeams.getSelectedTeams();
            if (teams.length > 0 && JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this, "Do you wish to restore deleted teams\n"
                    + "back to the reagular teams list?", "Restore Teams", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) {
                for (Team team : teams) {
                    DAO.restoreTeam(team);
                }
                if (isUpdated(Team.class)) {
                    refreshDeletedTeamsTable();
                    tabTeams.setSelectedIndex(0);
                    refreshTeamsTable();
                    refreshActiveTeamsTable();
                }
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_btnDeleteRestoreTeamsActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Method: main">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        MainFrame mainFrame = null;

        try {
            mainFrame = new MainFrame();

            final MainFrame toShow = mainFrame;

            //splashscreen
            boolean startOk = mainFrame.splash();

            if (startOk) {
                /*
                 * Create and display the form
                 */
                java.awt.EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        System.setProperty("sun.awt.exception.handler", BettingExceptionHandler.class.getName());
                        Thread.setDefaultUncaughtExceptionHandler(new BettingExceptionHandler());
                        toShow.setVisible(true);
                    }
                });
            } else {
                LOG.info("Exiting application due to errors during startup...");
                if (mainFrame != null) {
                    mainFrame.dispose();
                }
                DBManager.shutdownDB();
            }
        } catch (Exception e) {
            LOG.info("Exiting application due to errors during startup...");
            if (mainFrame != null) {
                mainFrame.dispose();
            }
            LOG.error(e.getMessage(), e);
            DBManager.shutdownDB();
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Netbeans variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnAddResultProvider;
    private JButton btnAddTeams;
    private JButton btnDeleteBets;
    private JButton btnDeleteRestoreTeams;
    private JButton btnFetchResultsFromWeb;
    private JButton btnNewBet;
    private JButton btnParse;
    private JButton btnRefreshDates;
    private JButton btnRemoveActiveTeam;
    private JButton btnRemoveResultProvider;
    private JButton btnSelectAllActiveTeams;
    private JButton btnSelectAllProviderSources;
    private JButton btnShowGraph;
    private JComboBox cbActiveTeamsFilter;
    private JComboBox cbBetsFilter;
    private JComboBox cbComparisonType;
    private JComboBox cbFilterBy;
    private JComboBox cbParsers;
    private JCheckBox chkBoxTeamFilter;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JScrollPane jScrollPane3;
    private JLabel lblAwayGoals;
    private JLabel lblAwayTeam;
    private JLabel lblGoalsSeparator;
    private JLabel lblHomeGoals;
    private JLabel lblHomeTeam;
    private JLabel lblLastBetInfo;
    private JLabel lblStatusBar;
    private JMenuItem miAddToActive;
    private JMenuItem miNewFixturesProvider;
    private JMenuItem miSetLeague;
    private JPanel panelDetails;
    private JPanel panelStatusBar;
    private JProgressBar pbStatusBar;
    private JPopupMenu popupTeamsTable;
    private JScrollPane spActiveTeamsTable;
    private JScrollPane spBets;
    private JScrollPane spDeletedTeamsTable;
    private JScrollPane spGraph;
    private JScrollPane spProvidersTable;
    private JScrollPane spTeamsTable;
    private JTabbedPane tabMain;
    private JTabbedPane tabTeams;
    private JTextArea textArea;
    private JTextField tfFilterValue;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="My variables declaration">
    private TeamsTable tableTeams = new TeamsTable(new TeamsTableModel(), 4, SortOrder.DESCENDING);
    private DeletedTeamsTable tableDeletedTeams = new DeletedTeamsTable(new DeletedTeamsTableModel(), 4, SortOrder.DESCENDING);
    private ActiveTeamsTable tableActiveTeams = new ActiveTeamsTable(new ActiveTeamsTableModel(), 4, SortOrder.ASCENDING);
    private BetsTable tableBets = new BetsTable(new BetsTableModel(), 0, SortOrder.DESCENDING);
    private ProvidersTable tableProviders = new ProvidersTable(new ProvidersTableModel(), 0, SortOrder.ASCENDING);

    private DocumentListener documentListenerFilterValue = new DocumentListener() {
        //<editor-fold defaultstate="collapsed" desc="...">
        @Override
        public void insertUpdate(DocumentEvent e) {
            handleTextChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            handleTextChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            handleTextChange();
        }

        private void handleTextChange() {
            applyFilter();
        }
        //</editor-fold>
    };

    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="ADDITIONAL INIT">
    private void additionalInit() {
        //center frame on screen
        this.setLocationRelativeTo(null);

        //providers table
        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        tableProviders.getRowSorter().setSortKeys(sortKeys);
        tableProviders.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    final int selectedRowCount = tableProviders.getSelectedRowCount();
                    btnRemoveResultProvider.setEnabled(selectedRowCount > 0);
                    btnFetchResultsFromWeb.setEnabled(selectedRowCount > 0);
                }
            }
            //</editor-fold>
        });
        spProvidersTable.setViewportView(tableProviders);

        //teams table
        tableTeams.addMouseListener(new MouseAdapter() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
                    int rowIndex = tableTeams.rowAtPoint(e.getPoint());
                    if (rowIndex == -1) {
                        return;
                    }
                    final Team team = tableTeams.getSelectedTeam();
                    String name = team.getName();
                    if (team.isActive() || JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(MainFrame.this, "Add " + name + " into the list of active teams?", "Add team?", JOptionPane.YES_NO_OPTION)) {
                        addTeamsToActiveTeamsTable();
                    }
                } else if (e.getButton() == MouseEvent.BUTTON3 && tableTeams.getSelectedRowCount() > 0) {
                    popupTeamsTable.show(e.getComponent(), e.getX(), e.getY());
                }
            }
            //</editor-fold>
        });
        tableTeams.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    final Team[] selectedTeams = tableTeams.getSelectedTeams();
                    boolean providerOk = true;
                    for (int i = 0; i < selectedTeams.length; i++) {
                        Team team = selectedTeams[i];
                        if (i < selectedTeams.length - 1) {
                            providerOk = providerOk && team.getCountry().equals(selectedTeams[i + 1].getCountry());
                            providerOk = providerOk && team.getSport().equals(selectedTeams[i + 1].getSport());
                            providerOk = providerOk && team.getLeague().equals(selectedTeams[i + 1].getLeague());
                        }
                        if (!providerOk) {
                            miNewFixturesProvider.setEnabled(false);
                            break;
                        } else {
                            miNewFixturesProvider.setEnabled(true);
                        }
                    }
                    boolean leagueOk = true;
                    for (int i = 0; i < selectedTeams.length; i++) {
                        Team team = selectedTeams[i];
                        if (i < selectedTeams.length - 1) {
                            leagueOk = leagueOk && team.getCountry().equals(selectedTeams[i + 1].getCountry());
                            leagueOk = leagueOk && team.getSport().equals(selectedTeams[i + 1].getSport());
                        }
                        if (!leagueOk) {
                            miSetLeague.setEnabled(false);
                            break;
                        } else {
                            miSetLeague.setEnabled(true);
                        }
                    }
                }
            }
            //</editor-fold>
        });
        tableTeams.addHighlighter(HighlighterFactory.createAlternateStriping());
        spTeamsTable.setViewportView(tableTeams);

        //filter value texfield listener to dynamically filter the table as user types
        tfFilterValue.getDocument().addDocumentListener(documentListenerFilterValue);

        //active teams table
        tableActiveTeams.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableActiveTeams.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    activeTeamsTableSelection();
                }
            }
            //</editor-fold>
        });

        tableActiveTeams.addMouseListener(new MouseAdapter() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int rowIndex = tableActiveTeams.rowAtPoint(e.getPoint());
                    if (rowIndex == -1) {
                        return;
                    }
                    btnNewBetActionPerformed(null);
                }
            }
            //</editor-fold>
        });
        tableActiveTeams.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "delete");
        tableActiveTeams.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "newBet");
        tableActiveTeams.isEditing();
        tableActiveTeams.getActionMap().put("delete", new DeleteAction(DeleteAction.ACTIVE));
        tableActiveTeams.getActionMap().put("newBet", new NewBetAction());
        spActiveTeamsTable.setViewportView(tableActiveTeams);

        //bets
        tableBets.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "delete");
        tableBets.getActionMap().put("delete", new DeleteAction(DeleteAction.BETS));
        tableBets.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableBets.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //<editor-fold defaultstate="collapsed" desc="...">
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    betsTableSelection();
                }
            }
            //</editor-fold>
        });
        spBets.setViewportView(tableBets);

        //deleted teams
        spDeletedTeamsTable.setViewportView(tableDeletedTeams);

        //called to initially disable btns
        activeTeamsTableSelection();
        betsTableSelection();
        pack();

        //start maximized
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        //status bar at the bottom
        lblStatusBar.setText(" ");
        lblStatusBar.setMinimumSize(new Dimension(lblStatusBar.getWidth(), pbStatusBar.getSize().height));
        pbStatusBar.setVisible(false);
    }
    //</editor-fold>

    private boolean splash() {
        //<editor-fold defaultstate="collapsed" desc="...">
        SplashScreen splashScreen = new SplashScreen(this, true);
        splashScreen.setVisible(true);
        final boolean startOk = splashScreen.isStartOk();
        splashScreen = null;
        return startOk;
        //</editor-fold>
    }

    private void addTeamsToActiveTeamsTable() {
        //<editor-fold defaultstate="collapsed" desc="...">
        //guaranteed that at least one is selected
        Team[] teams = tableTeams.getSelectedTeams();
        //cancel any filter that might be active
        cbActiveTeamsFilter.setSelectedItem("All");
        for (int i = 0; i < teams.length; i++) {
            if (!teams[i].isActive()) {
                teams[i].setStatus(TeamStatus.ACTIVE);
                final Timestamp nextMatchDate = teams[i].getNextMatchDate();
                if (nextMatchDate != null && nextMatchDate.before(Utils.now())) {
                    teams[i].setNextMatchDate(null);
                }
                DAO.saveOrUpdateTeam(teams[i]);
            }
        }
        //if at least one was added, refresh the table
        if (isUpdated(Team.class)) {
            refreshActiveTeamsTable();
        }
        //remove any active selection on the table
        tableActiveTeams.getSelectionModel().clearSelection();
        //select all that were added
        for (Team team : teams) {
            int index = tableActiveTeams.getIndexOf(team);
            tableActiveTeams.addRowSelectionInterval(index, index);
            tableActiveTeams.scrollRowToVisible(index);
        }
        selectTab("My Bets");
        //</editor-fold>
    }

    public void selectTab(String name) {
        //<editor-fold defaultstate="collapsed" desc="...">
        int indexToSelect = 0;
        for (int i = 0; i < tabMain.getTabCount(); i++) {
            indexToSelect = i;
            if (tabMain.getTitleAt(i).equals(name)) {
                break;
            }
        }
        tabMain.setSelectedIndex(indexToSelect);
        //</editor-fold>
    }

    private void applyFilter() {
        //<editor-fold defaultstate="collapsed" desc="...">
        RowFilter<Object, Object> filter;
        TableSortController rowSorter = (TableSortController) tableTeams.getRowSorter();
        if (!chkBoxTeamFilter.isSelected()) {
            filter = null;
        } else {
            String value = tfFilterValue.getText();
            String filterBy = cbFilterBy.getSelectedItem().toString();

            if (filterBy.equals("Team") || filterBy.equals("Sport") || filterBy.equals("Country") || filterBy.equals("League")) {
                if (Utils.isEmpty(value)) {
                    filter = null;
                } else {
                    String type = cbComparisonType.getSelectedItem().toString();
                    String regex = type.equals("=") ? "^" + value : ".*" + value + ".*";
                    int column = filterBy.equals("Team") ? 0 : (filterBy.equals("Sport") ? 1 : (filterBy.equals("Country") ? 2 : 3));
                    filter = RowFilters.regexFilter(Pattern.CASE_INSENSITIVE, regex, column);
                }
            } else if (filterBy.equals("Draws")) {
                String type = cbComparisonType.getSelectedItem().toString();
                RowFilter.ComparisonType compType;
                if (type.equals(">")) {
                    compType = RowFilter.ComparisonType.AFTER;
                } else if (type.equals("=")) {
                    compType = RowFilter.ComparisonType.EQUAL;
                } else {
                    compType = RowFilter.ComparisonType.BEFORE;
                }
                try {
                    filter = RowFilter.numberFilter(compType, Integer.parseInt(value), 4);
                } catch (NumberFormatException numberFormatException) {
                    filter = null;
                }
            } else {
                final boolean showInactive = cbComparisonType.getSelectedItem().toString().equals("No");
                filter = new RowFilter() {

                    @Override
                    public boolean include(Entry entry) {
                        return showInactive ? entry.getValue(5) == null : entry.getValue(5) != null;
                    }
                };
            }
        }
        rowSorter.setRowFilter(filter);
        //</editor-fold>
    }

    private String getSelectedTitle() {
        return tabMain.getTitleAt(tabMain.getSelectedIndex());
    }

    private void activeTeamsTableSelection() {
        //<editor-fold defaultstate="collapsed" desc="...">
        int[] indices = tableActiveTeams.getSelectedRows();
        BetsTableModel betsModel = (BetsTableModel) tableBets.getModel();
        boolean first = true;
        for (int index : indices) {
            Team team = tableActiveTeams.getTeam(index);
            if (first) {
                betsModel.replaceAll(new ArrayList<Bet>(team.getBets()));
                first = false;
                continue;
            }
            betsModel.addAll(new ArrayList<Bet>(team.getBets()));
        }
        if (indices.length != 0) {
            btnRemoveActiveTeam.setEnabled(true);
            if (indices.length == 1) {
                Team team = tableActiveTeams.getTeam(indices[0]);
                if (team.hasActiveBets()) {
                    lblLastBetInfo.setText("In progress");
                } else if (team.getBets().isEmpty()) {
                    lblLastBetInfo.setText("No bets");
                } else if (team.hasCompleteChain()) {
                    lblLastBetInfo.setText("Last bet won");
                } else if (team.hasIncompleteChain()) {
                    lblLastBetInfo.setText("Last bet lost");
                }
                if (team.isUpdatedRecently()) {
                    lblLastBetInfo.setText("Updated less than 5 mins ago");
                }
                btnNewBet.setEnabled(true);
            } else {
                btnNewBet.setEnabled(false);
                lblLastBetInfo.setText(indices.length + " teams selected");
            }
        } else {
            btnRemoveActiveTeam.setEnabled(false);
            btnNewBet.setEnabled(false);
            lblLastBetInfo.setText(" ");
            betsModel.clear();
        }
        //</editor-fold>
    }

    private void betsTableSelection() {
        //<editor-fold defaultstate="collapsed" desc="...">
        int[] indices = tableBets.getSelectedRows();
        if (indices.length > 0) {
            btnDeleteBets.setEnabled(true);
        } else {
            btnDeleteBets.setEnabled(false);
        }
        if (indices.length == 1) {
            Bet bet = tableBets.getBet(indices[0]);
            if (CANCELED.equals(bet.getStatus()) || ACTIVE.equals(bet.getStatus())) {
                hideMatchResult();
            } else {
                Match match;
                match = DAO.getMatchForBet(bet);
                showMatchResult(match);
            }
        } else {
            hideMatchResult();
        }
        //</editor-fold>
    }

    private void showMatchResult(Match match) {
        //<editor-fold defaultstate="collapsed" desc="...">
        Font bold = new Font("Tahoma", Font.BOLD, 11);
        Font plain = new Font("Tahoma", Font.PLAIN, 11);

        if (MatchResult.DRAW.equals(match.getResult())) {
            lblHomeTeam.setFont(plain);
            lblAwayTeam.setFont(plain);
        } else if (match.getHomeGoals() > match.getAwayGoals()) {
            lblHomeTeam.setFont(bold);
            lblAwayTeam.setFont(plain);
        } else {
            lblHomeTeam.setFont(plain);
            lblAwayTeam.setFont(bold);
        }
        lblHomeTeam.setText(match.getId().getHomeTeam().getName());
        lblAwayTeam.setText(match.getId().getAwayTeam().getName());
        lblGoalsSeparator.setText(":");
        lblHomeGoals.setText(String.valueOf(match.getHomeGoals()));
        lblAwayGoals.setText(String.valueOf(match.getAwayGoals()));
        //</editor-fold>
    }

    private void hideMatchResult() {
        //<editor-fold defaultstate="collapsed" desc="...">
        lblHomeTeam.setText(" ");
        lblAwayTeam.setText(" ");
        lblGoalsSeparator.setText(" ");
        lblHomeGoals.setText(" ");
        lblAwayGoals.setText(" ");
        //</editor-fold>
    }

    private Team getSelectedActiveTeam() {
        return tableActiveTeams.getTeam(tableActiveTeams.getSelectedRow());
    }

    //<editor-fold defaultstate="collapsed" desc="Tasks stuff">
    private void hideStatus() {
        lblStatusBar.setText(" ");
        pbStatusBar.setIndeterminate(false);
        pbStatusBar.setStringPainted(false);
        pbStatusBar.setString(null);
        pbStatusBar.setValue(0);
        pbStatusBar.setVisible(false);
    }

    private void showStatus(String lblMessage, String pbString, boolean indeterminate, int maxValue) {
        showStatus(lblMessage, pbString, indeterminate);
        pbStatusBar.setMinimum(0);
        pbStatusBar.setValue(0);
        pbStatusBar.setMaximum(maxValue);
    }

    private void showStatus(String lblMessage, String pbString, boolean indeterminate) {
        pbStatusBar.setIndeterminate(indeterminate);
        if (pbString != null) {
            pbStatusBar.setStringPainted(true);
            pbStatusBar.setString(pbString);
        }
        if (lblMessage != null) {
            lblStatusBar.setText(lblMessage);
        }
        pbStatusBar.setVisible(true);
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="refreshProvidersTable()">
    public void refreshProvidersTable() {
        String message = "Refreshing result providers...";
        LOG.debug(message);
        List<Provider> resultProviders = DAO.getResultProviders();
        tableProviders.clear();
        for (Provider provider : resultProviders) {
            tableProviders.addProvider(provider);
        }
        tableProviders.packAll();
        tableProviders.selectAll();
        setAdded(Provider.class, false);
        setRemoved(Provider.class, false);
        setUpdated(Provider.class, false);
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="ParseTask">
    private class ParseJob extends Job {

        private final Logger LOG = Logger.getLogger(ParseJob.class);

        @Override
        public Object run() {
            String message = "Parsing...";
            LOG.debug(message);
            btnParse.setEnabled(false);
            btnFetchResultsFromWeb.setEnabled(false);
            pbStatusBar.setMinimum(0);
            pbStatusBar.setMaximum(textArea.getLineCount());
            showStatus(message, null, false);
            String text = textArea.getText();
            Parser parser = ParserManager.getParser(cbParsers.getSelectedItem().toString(), pbStatusBar);
            Set<ParseResult> results = parser.parse(text);
            btnParse.setEnabled(true);
            btnFetchResultsFromWeb.setEnabled(true);
            hideStatus();
            return results;
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="refreshTeamsTableTask()">
    public void refreshTeamsTable() {
        String message = "Refreshing teams table...";
        LOG.debug(message);
        List<Team> teams = DAO.getAllRegularTeams();
        TeamsTableModel model = tableTeams.getTableModel();
        model.replaceAll(teams);
        applyFilter();
        setUpdated(Team.class, false);
        setAdded(Team.class, false);
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="refreshDeletedTeamsTable()">
    public void refreshDeletedTeamsTable() {
        String message = "Refreshing deleted teams table...";
        LOG.debug(message);
        List<Team> teams = DAO.getAllDeletedTeams();
        DeletedTeamsTableModel model = tableDeletedTeams.getTableModel();
        model.replaceAll(teams);
        applyFilter();
        setUpdated(Team.class, false);
        setAdded(Team.class, false);
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="FetchJob">
    private class FetchJob extends Job {

        private final Logger LOG = Logger.getLogger(FetchJob.class);

        @Override
        public Object run() {
            String message = "Fetching results from web...";
            LOG.debug(message);
            Provider[] providers = tableProviders.getSelectedProviders();
            showStatus(message, null, false, providers.length);
            textArea.setText("");
            btnParse.setEnabled(false);
            btnFetchResultsFromWeb.setEnabled(false);
            String url = null;
            int i = 0;
            try {
                for (Provider provider : providers) {
                    i++;
                    url = provider.getUrl();
                    String text = Utils.getHtmlFromUrl(url);
                    textArea.append(provider.getControlText());
                    textArea.append(text);
                    pbStatusBar.setValue(i);
                }
            } finally {
                btnFetchResultsFromWeb.setEnabled(true);
                hideStatus();
                if (textArea.getText().length() != 0) {
                    Parser p = ParserManager.detectSuitableParser(textArea.getText());
                    if (p != null) {
                        message = "Parser auto-detected";
                        cbParsers.setSelectedItem(p);
                        btnParse.setEnabled(true);
                    } else {
                        message = "Parser auto-detection unsuccessful";
                    }
                    lblStatusBar.setText(message);
                }
            }
            return null;
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="refreshActiveTeamsTable()">
    public void refreshActiveTeamsTable() {
        String message = "Refreshing active teams table...";
        LOG.debug(message);
        List<Team> teams = DAO.getActiveTeams();
        ActiveTeamsTableModel model = (ActiveTeamsTableModel) tableActiveTeams.getModel();
        model.replaceAll(teams);
        tableActiveTeams.packAll();
        setUpdated(Team.class, false);
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="RefreshDatesTask">
    /**
     * NEVER RUN THIS TASK WITHOUT AsyncWorker.post() - exception handling, commits and rollbacks will be broken
     */
    private class RefreshDatesTask extends AsyncTask {

        private final Logger LOG = Logger.getLogger(RefreshDatesTask.class);
        boolean error = false;

        @Override
        public Object run() throws Exception {
            ActiveTeamsTableModel model = (ActiveTeamsTableModel) tableActiveTeams.getModel();
            int rowCount = model.getRowCount();
            if (rowCount > 0) {
                String message = "Refreshing dates...";
                LOG.debug(message);
                btnRefreshDates.setEnabled(false);
                pbStatusBar.setMinimum(0);
                showStatus(message, null, false);
                pbStatusBar.setMaximum(model.getRowCount());
                final List<Team> teams = model.getTeams();
                HashMap<String, Set<ParseResult>> urlResultsMap = new HashMap<String, Set<ParseResult>>();
                TeamNameMapper mapper = TeamNameMapper.getInstance();
                for (int i = 0; i < teams.size(); i++) {
                    final Team team = teams.get(i);
                    if (Utils.isEmpty(team.getFixturesProvider())) {
                        LOG.error("Could not determine next match date for team " + team + " because no fixtures provider is defined for it.");
                        continue;
                    }
                    final String url = team.getFixturesProvider().getUrl();
                    if (!urlResultsMap.containsKey(url)) {
                        String text;
                        try {
                            text = Utils.getHtmlFromUrl(url);
                            text = new StringBuilder(team.getControlText()).append(text).toString();
                        } catch (Exception ex) {
                            LOG.error("Unable to retrieve data from URL: " + url + " (" + ex.getCause() + ")");
                            continue;
                        }
                        Parser p = ParserManager.detectSuitableParser(text);
                        Set<ParseResult> parseResults = Collections.EMPTY_SET;
                        if (p != null) {
                            parseResults = p.parse(text);
                        }
                        //sorted by date, ascending

                        urlResultsMap.put(url, parseResults);
                    }
                    boolean dateFound = false;
                    for (ParseResult r : urlResultsMap.get(url)) {
                        Team homeTeam = mapper.getTeam(r.getHomeTeamName(), team.getSport(), team.getCountry());
                        Team awayTeam = mapper.getTeam(r.getAwayTeamName(), team.getSport(), team.getCountry());
                        if (team.equals(homeTeam) || team.equals(awayTeam)) {
                            final Timestamp nextMatchDate = team.getNextMatchDate();
                            if (nextMatchDate == null || !r.getDate().equals(nextMatchDate)) {
                                team.setNextMatchDate(r.getDate());
                                DAO.saveOrUpdateTeam(team);
                                model.fireTableCellUpdated(i, 2);
                            }
                            dateFound = true;
                            break;
                        }
                    }
                    if (!dateFound) {
                        team.setNextMatchDate(Utils.timestamp("2050-01-01"));
                    }
                    pbStatusBar.setValue(i);
                }
                setUpdated(Team.class, false);
            }
            return null;
        }

        @Override
        public void success(Object result) {
            hideStatus();
            btnRefreshDates.setEnabled(true);
        }

        @Override
        public void failure(Throwable ex) {
            hideStatus();
            btnRefreshDates.setEnabled(true);
            LOG.error(ex.getMessage(), ex);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="SPLASH SCREEN">
    private class SplashScreen extends javax.swing.JDialog {

        private final Logger LOG = Logger.getLogger(SplashScreen.class);
        private boolean startOk = false;

        /**
         * Creates new form SplashScreen
         */
        public SplashScreen(MainFrame parent, boolean modal) {
            super(parent, modal);
            initComponents();
            this.setLocationRelativeTo(null);
            go();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {

            jPanel2 = new javax.swing.JPanel();
            pb = new javax.swing.JProgressBar();
            jLabel2 = new javax.swing.JLabel();
            lblText = new javax.swing.JLabel();
            jPanel1 = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setUndecorated(true);

            jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            jLabel2.setText("Initializing:");

            lblText.setText(" ");

            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/splash.png"))); // NOI18N

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
            );
            jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblText))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(lblText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pb, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>

        // Variables declaration - do not modify
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JLabel lblText;
        private javax.swing.JProgressBar pb;
        // End of variables declaration

        private void go() {
            try {
                new SplashInitThread().start();
            } catch (Exception ex) {
                LOG.error(ex.getMessage(), ex);
                dispose();
                startOk = false;
            }
        }

        private class SplashInitThread extends Thread {

            @Override
            public void run() {
                while (!SplashScreen.this.isShowing()) {
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException ex) {
                    }
                }

                pb.setMaximum(7);
                pb.setValue(0);

                lblText.setText("Hibernate");

                try {
                    try {
                        //to trigger static initialization
                        Class.forName("org.kroky.betting.db.DAO");
                        pb.setValue(1);
                    } catch (Throwable t) {
                        throw new BettingException("Failed to initialize hibernate", "Failed to initialize hibernate", t);
                    }

                    //init providers
                    lblText.setText("Mappings");
                    TeamNameMapper.getInstance();
                    pb.setValue(3);

                    //init teams data
                    lblText.setText("Teams Data");
                    refreshTeamsTable();
                    pb.setValue(4);

                    //init teams data
                    lblText.setText("Deleted Teams Data");
                    refreshDeletedTeamsTable();
                    pb.setValue(5);

                    //init providers
                    lblText.setText("Result Providers");
                    refreshProvidersTable();
                    pb.setValue(6);

                    //init active teams data
                    lblText.setText("Active Teams Data");
                    refreshActiveTeamsTable();
                    pb.setValue(7);
                    startOk = true;
                } catch (ExceptionInInitializerError t) {
                    handleFailure(t.getCause());
                } catch (Throwable t) {
                    handleFailure(t);
                }
                dispose();
            }

            private void handleFailure(Throwable t) {
                startOk = false;
                LOG.error(t.getMessage(), t);
                Utils.showError(SplashScreen.this, t);
            }
        }

        public boolean isStartOk() {
            return startOk;
        }
    }
    //</editor-fold>

    private class DeleteAction extends AbstractAction {

        //<editor-fold defaultstate="collapsed" desc="...">
        private String tableName;

        public static final String ACTIVE = "active";
        public static final String BETS = "bets";

        public DeleteAction(String tableName) {
            this.tableName = tableName;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (tableName.equals(ACTIVE)) {
                btnRemoveActiveTeamActionPerformed(e);
            } else if (tableName.equals(BETS)) {
                btnDeleteBetsActionPerformed(e);
            }
        }
        //</editor-fold>
    }

    private class NewBetAction extends AbstractAction {

        //<editor-fold defaultstate="collapsed" desc="...">
        @Override
        public void actionPerformed(ActionEvent e) {
            int rowIndex = tableActiveTeams.getSelectedRow();
            if (rowIndex == -1) {
                return;
            }
            btnNewBetActionPerformed(null);
        }
        //</editor-fold>
    }
}
