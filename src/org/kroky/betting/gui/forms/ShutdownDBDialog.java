/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.betting.gui.forms;

import foxtrot.AsyncTask;
import foxtrot.AsyncWorker;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.kroky.betting.common.exceptions.BettingException;
import org.kroky.betting.common.util.Utils;
import org.kroky.betting.db.DAO;
import org.kroky.betting.db.DBManager;
import org.kroky.betting.db.DBState;

/**
 *
 * @author Kroky
 */
public class ShutdownDBDialog extends javax.swing.JDialog {

    private final Logger LOG = Logger.getLogger(ShutdownDBDialog.class);
    
    /**
     * Creates new form ShutdownDBDialog
     */
    public ShutdownDBDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        label.setText("DB backup in progress...");

        jLabel2.setText("                                                                     ");

        jLabel3.setText("                                                                     ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(label)
                .addComponent(jLabel2)
                .addComponent(jLabel3))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label;
    // End of variables declaration//GEN-END:variables

    private Component parent;
    private void additionalInit() {
        AsyncWorker.post(new ShutDownTask());
    }

    private class ShutDownTask extends AsyncTask {
        private final DateFormat DF = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
        private final File BACKUP_DIR = new File("DB Backups");
        @Override
        public Object run() throws BettingException {
            Utils.centerOnParent(parent, ShutdownDBDialog.this);
            String message = "Closing DB session...";
            label.setText(message);
            while(!ShutdownDBDialog.this.isShowing()) {
                try {Thread.sleep(50);} catch (InterruptedException ex) {}
            }
            DAO.closeSession();
            message = "Shutting down DB...";
            label.setText(message);
            DBManager.shutdownDB();
            if(DBState.isGeneralUpdate()) {
                message = "DB backup in progress...";
                label.setText(message);
                LOG.info(message);
                try {
                    removeOldestBackup(5);
                    File backupDir = createNewBackupDir();
                    FileUtils.copyDirectoryToDirectory(new File("BettingDB"), backupDir);
                    message = "DB backup finished.";
                    LOG.info(message);
                } catch (Exception ex) {
                    throw new BettingException("Unable to backup the DB.", "Unable to backup the DB.", ex);
                } finally {
                    dispose();
                }
            }
            dispose();
            return null;
        }

        private File createNewBackupDir() {
            if(BACKUP_DIR.exists() && !BACKUP_DIR.isDirectory()) {
                BACKUP_DIR.delete();
            }
            String backupDirName = DF.format(Utils.now());
            File backupDir = new File(BACKUP_DIR, backupDirName);
            backupDir.mkdirs();
            return backupDir;
        }

        private void removeOldestBackup(int keptBackups) {
            if(!BACKUP_DIR.exists()) {
                return;
            }
            Set<String> dirs = new TreeSet<String>();
            for(File dir : BACKUP_DIR.listFiles()) {
                if(dir.isDirectory()) {
                    dirs.add(dir.getName());
                }
            }
            if(dirs.size() >= keptBackups) {
                LOG.info("Removing older backups...");
            }
            for (Iterator<String> it = dirs.iterator(); dirs.size() >= keptBackups;) {
                File dirToDelete = new File(BACKUP_DIR, it.next());
                try {
                    it.remove();
                    FileUtils.deleteDirectory(dirToDelete);
                    LOG.info("Removed " + dirToDelete.getAbsolutePath());
                } catch (IOException ex) {
                    LOG.warn("Unable to delete backup at " + dirToDelete.getAbsolutePath(), ex);
                }
            }
        }

        @Override
        public void success(Object result) {
            //nothing to do
        }

        @Override
        public void failure(Throwable ex) {
            LOG.error(ex.getMessage(), ex);
        }
        
    }
}
